#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/../../.." && pwd)"
cd "${REPO_ROOT}" >/dev/null

ensure_local_dbmate() {
  local target_dir="${REPO_ROOT}/.local/bin"
  local target_bin="${target_dir}/dbmate"
  local download_url="https://github.com/amacneil/dbmate/releases/download/v2.13.0/dbmate-linux-amd64"

  if [[ -x "${target_bin}" ]]; then
    printf '%s\n' "${target_bin}"
    return
  fi

  if ! command -v curl >/dev/null 2>&1; then
    echo "curl is required to download dbmate" >&2
    exit 1
  fi

  mkdir -p "${target_dir}"
  local tmp_file
  tmp_file="$(mktemp "${target_dir}/dbmate.XXXXXX")"

  if ! curl -fsSL "${download_url}" -o "${tmp_file}"; then
    echo "Failed to download dbmate from ${download_url}" >&2
    rm -f "${tmp_file}"
    exit 1
  fi

  chmod +x "${tmp_file}"
  mv "${tmp_file}" "${target_bin}"
  printf '%s\n' "${target_bin}"
}

use_docker() {
  if [[ "${DBMATE_NO_DOCKER:-}" == "1" ]]; then
    return 1
  fi
  if [[ "${DBMATE_FORCE_LOCAL:-}" == "1" ]]; then
    return 1
  fi
  if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
    return 0
  fi
  return 1
}

DEFAULT_DOCKER_URL="postgres://postgres:postgres@db:5432/lims?sslmode=disable"
DEFAULT_LOCAL_URL="postgres://postgres:postgres@127.0.0.1:${LOCAL_DB_PORT:-6432}/lims?sslmode=disable"

if use_docker; then
  DEFAULT_DATABASE_URL="${DEFAULT_DOCKER_URL}"
else
  DEFAULT_DATABASE_URL="${DEFAULT_LOCAL_URL}"
fi

DATABASE_URL="${DATABASE_URL:-$DEFAULT_DATABASE_URL}"

if [[ ! -d ops/db/migrations ]]; then
  echo "Expected ops/db/migrations directory not found" >&2
  exit 1
fi

if use_docker; then
  export DBMATE_MIGRATIONS_DIR="/db/migrations"
  export DBMATE_SCHEMA_FILE="/db/schema.sql"

  HOST_REPO_ROOT="${LOCAL_WORKSPACE_FOLDER:-}"

  if [[ -z "${HOST_REPO_ROOT}" ]]; then
    DEV_CONTAINER_ID="$(docker compose ps -q dev 2>/dev/null | head -n1 || true)"
    if [[ -n "${DEV_CONTAINER_ID}" ]]; then
      TEMPLATE="{{range .Mounts}}{{if eq .Destination \"${REPO_ROOT}\"}}{{.Source}}{{end}}{{end}}"
      HOST_REPO_ROOT="$(docker inspect -f "${TEMPLATE}" "${DEV_CONTAINER_ID}" 2>/dev/null || true)"

      if [[ -z "${HOST_REPO_ROOT}" ]]; then
        FALLBACK_TEMPLATE='{{range .Mounts}}{{if eq .Destination "/workspace"}}{{.Source}}{{end}}{{end}}'
        FALLBACK_SOURCE="$(docker inspect -f "${FALLBACK_TEMPLATE}" "${DEV_CONTAINER_ID}" 2>/dev/null || true)"
        if [[ -n "${FALLBACK_SOURCE}" && "${REPO_ROOT}" == /workspace* ]]; then
          RELATIVE_PATH="${REPO_ROOT#/workspace}"
          HOST_REPO_ROOT="${FALLBACK_SOURCE}${RELATIVE_PATH}"
        fi
      fi
    fi
  fi

  HOST_REPO_ROOT="${HOST_REPO_ROOT:-$REPO_ROOT}"

  exec docker compose run --rm \
    -e "DATABASE_URL=${DATABASE_URL}" \
    -e "DBMATE_MIGRATIONS_DIR=${DBMATE_MIGRATIONS_DIR}" \
    -e "DBMATE_SCHEMA_FILE=${DBMATE_SCHEMA_FILE}" \
    -v "${HOST_REPO_ROOT}/ops/db:/db" \
    --workdir /db \
    dbmate "$@"
else
  export DBMATE_MIGRATIONS_DIR="${DBMATE_MIGRATIONS_DIR:-${REPO_ROOT}/ops/db/migrations}"
  export DBMATE_SCHEMA_FILE="${DBMATE_SCHEMA_FILE:-${REPO_ROOT}/ops/db/schema.sql}"

  DBMATE_BIN="${DBMATE_BIN:-$(ensure_local_dbmate)}"
  exec "${DBMATE_BIN}" -d "${DBMATE_MIGRATIONS_DIR}" -s "${DBMATE_SCHEMA_FILE}" "$@"
fi
