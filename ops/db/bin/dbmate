#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/../../.." && pwd)"
cd "${REPO_ROOT}" >/dev/null

RUNTIME_HELPER="${REPO_ROOT}/ops/bin/runtime.sh"
if [[ ! -r "${RUNTIME_HELPER}" ]]; then
  echo "Runtime helper not found at ${RUNTIME_HELPER}" >&2
  exit 1
fi

# shellcheck source=../../bin/runtime.sh
source "${RUNTIME_HELPER}"

resolve_dbmate_runtime() {
  local forced_setting

  if forced_setting="$(crazylims_normalize_bool "${DBMATE_USE_DOCKER:-}")"; then
    if [[ "${forced_setting}" == "1" ]]; then
      if ! crazylims_docker_available; then
        echo "DBMATE_USE_DOCKER was set but Docker is not available" >&2
        exit 1
      fi
      printf 'docker\n'
      return
    fi
    printf 'local\n'
    return
  fi

  if forced_setting="$(crazylims_normalize_bool "${DBMATE_NO_DOCKER:-}")"; then
    if [[ "${forced_setting}" == "1" ]]; then
      printf 'local\n'
      return
    fi
  fi

  if forced_setting="$(crazylims_normalize_bool "${DBMATE_FORCE_LOCAL:-}")"; then
    if [[ "${forced_setting}" == "1" ]]; then
      printf 'local\n'
      return
    fi
  fi

  printf '%s\n' "$(crazylims_resolve_runtime)"
}

ensure_local_dbmate() {
  local target_dir="${REPO_ROOT}/.local/bin"
  local target_bin="${target_dir}/dbmate"
  local download_url="https://github.com/amacneil/dbmate/releases/download/v2.13.0/dbmate-linux-amd64"

  if [[ -x "${target_bin}" ]]; then
    printf '%s\n' "${target_bin}"
    return
  fi

  if ! command -v curl >/dev/null 2>&1; then
    echo "curl is required to download dbmate" >&2
    exit 1
  fi

  mkdir -p "${target_dir}"
  local tmp_file
  tmp_file="$(mktemp "${target_dir}/dbmate.XXXXXX")"

  if ! curl -fsSL "${download_url}" -o "${tmp_file}"; then
    echo "Failed to download dbmate from ${download_url}" >&2
    rm -f "${tmp_file}"
    exit 1
  fi

  chmod +x "${tmp_file}"
  mv "${tmp_file}" "${target_bin}"
  printf '%s\n' "${target_bin}"
}

if [[ -n "${DBMATE_RUNTIME:-}" ]]; then
  if ! DBMATE_RUNTIME="$(crazylims_normalize_runtime "${DBMATE_RUNTIME}")"; then
    echo "DBMATE_RUNTIME must be 'docker' or 'local'" >&2
    exit 1
  fi
else
  DBMATE_RUNTIME="$(resolve_dbmate_runtime)"
fi

DEFAULT_DOCKER_URL="postgres://postgres:postgres@db:5432/lims?sslmode=disable"
DEFAULT_LOCAL_URL="postgres://postgres:postgres@127.0.0.1:${LOCAL_DB_PORT:-6432}/lims?sslmode=disable"

if [[ "${DBMATE_RUNTIME}" == "docker" ]]; then
  DEFAULT_DATABASE_URL="${DEFAULT_DOCKER_URL}"
else
  DEFAULT_DATABASE_URL="${DEFAULT_LOCAL_URL}"
fi

DATABASE_URL="${DATABASE_URL:-$DEFAULT_DATABASE_URL}"

if [[ ! -d ops/db/migrations ]]; then
  echo "Expected ops/db/migrations directory not found" >&2
  exit 1
fi

if [[ "${DBMATE_RUNTIME}" == "docker" ]]; then
  export DBMATE_MIGRATIONS_DIR="/db/migrations"
  export DBMATE_SCHEMA_FILE="/db/schema.sql"

  HOST_REPO_ROOT="$(crazylims_resolve_host_repo_root "${REPO_ROOT}")"

  exec docker compose run --rm \
    -e "DATABASE_URL=${DATABASE_URL}" \
    -e "DBMATE_MIGRATIONS_DIR=${DBMATE_MIGRATIONS_DIR}" \
    -e "DBMATE_SCHEMA_FILE=${DBMATE_SCHEMA_FILE}" \
    -v "${HOST_REPO_ROOT}/ops/db:/db" \
    --workdir /db \
    dbmate "$@"
else
  export DBMATE_MIGRATIONS_DIR="${DBMATE_MIGRATIONS_DIR:-${REPO_ROOT}/ops/db/migrations}"
  export DBMATE_SCHEMA_FILE="${DBMATE_SCHEMA_FILE:-${REPO_ROOT}/ops/db/schema.sql}"

  DBMATE_BIN="${DBMATE_BIN:-$(ensure_local_dbmate)}"
  exec "${DBMATE_BIN}" -d "${DBMATE_MIGRATIONS_DIR}" -s "${DBMATE_SCHEMA_FILE}" "$@"
fi
